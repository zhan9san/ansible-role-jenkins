---
- name: Ensure Jenkins tool directory exists
  ansible.builtin.file:
    path: "{{ jenkins_tool_dir }}"
    state: directory
    mode: "0755"

- name: Get the jenkins-plugin-manager jarfile
  ansible.builtin.get_url:
    url: "{{ jenkins_plugin_manager_url }}"
    dest: "{{ jenkins_plugin_manager_path }}"
    mode: "0644"
  environment: "{{ jenkins_download_proxy if (jenkins_proxy_host and jenkins_proxy_port) else {} }}"

- name: Copy plugins.txt to jenkins server
  ansible.builtin.copy:
    src: "{{ jenkins_plugin_file }}"
    dest: "{{ jenkins_plugin_file_path }}"
    mode: "0644"
    backup: true
  register: copy_result

- name: Install plugins
  ansible.builtin.command:
    cmd: "{{ java_bin }} -jar {{ jenkins_plugin_manager_path }} -w /usr/share/java/jenkins.war -f {{ jenkins_plugin_file_path }} -d {{ jenkins_home }}/plugins {{ jenkins_plugin_manager_proxy_port }} {{ jenkins_plugin_manager_proxy_host }} {{ jenkins_plugin_manager_non_proxy_hosts }}"  # yamllint disable-line rule:line-length
  when: copy_result.changed # noqa: no-handler
  register: command_result
  changed_when: true
  ignore_errors: true

- name: Set Jenkins plugins foler permission
  ansible.builtin.file:
    path: "{{ jenkins_home }}/plugins"
    recurse: true
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"

- name: Recover plugins.txt if the installation failed
  when: command_result.failed is defined and command_result.failed
  block:
    - name: Recover plugins.txt from backup
      ansible.builtin.command:
        cmd: "mv {{ copy_result.backup_file }} {{ jenkins_plugin_file_path }}"
      when: copy_result.backup_file is defined
      changed_when: true
    - name: Handle installation failure
      ansible.builtin.fail:
        msg: "Failed to install plugins!"
